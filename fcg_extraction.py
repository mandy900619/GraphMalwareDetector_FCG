import pandas as pd
import numpy as np
from param_parser import parameter_parser
import r2pipe
import os
import graphviz
import time
import pickle
import concurrent.futures
from timeout_decorator import timeout
import signal
from func_timeout import func_set_timeout
import func_timeout


@func_set_timeout(3600)
def extract_fcgOpcode_radare2(input: str, filename: str, output: str):
    filenamePrefix = filename[:2]
    outputPath = os.path.join(output, filename) + ".pickle"
    if os.path.isfile(outputPath):
        return
    input = input + filenamePrefix
    samplePath = os.path.join(input, filename)
    r2 = r2pipe.open(samplePath, flags=["-2"])
    r2.cmd("aaaa")
    command = "agCd"
    dotString = r2.cmd(command)
    function_opcode_mapping = {}
    funcAddr = []
    funcLabel = []
    for line in dotString.split("\n"):
        word = line.split()
        try:
            if word[0][0] == '"':
                addr = word[0].replace('"', "")
                funcAddr.append(addr)
                label = word[1].replace('[label="', "")
                label = word[1].replace('"', "")
                funcLabel.append(label)
                if addr in function_opcode_mapping.keys():
                    continue
                command = "pif @" + addr + "~[0]"
                # print(command)
                Instructions = ''
                Instructions = r2.cmd(command)
                # print(Instructions)
                opcode_list = []
                if Instructions:
                    opcode_list = Instructions.split("\n")
                function_opcode_mapping[addr] = opcode_list
        except:
            pass
    r2.cmd("quit")
    with open(outputPath, "wb") as f:
        pickle.dump(function_opcode_mapping, f)
        f.close()


def process_file(file, total, dataset):
    global count
    label = dataset.loc[dataset["filename"] == file, "label"].iloc[0]
    if label == "malware":
        input = args.input_malware
    else:
        input = args.input_benignware
    print(f"\rProgress: {file}({count}/{total})", end="", flush=True)
    try:
        extract_fcgOpcode_radare2(
            input,
            file,
            args.output + "/fcgOpcode_pickle",
        )
        count += 1
    except func_timeout.exceptions.FunctionTimedOut:
        print(f"Time out: {file}")


def main(args):
    print(f"Malware root folder: {args.input_malware}")
    print(f"Benignware root folder: {args.input_benignware}")
    print(f"Dataset path: {args.input_dataset}")
    start_time = time.time()
    dataset = pd.read_csv(args.input_dataset)
    file_list = dataset["filename"]
    concurrency = 20
    global count
    count = 0
    total = len(file_list)
    with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency) as executor:
        futures = [
            executor.submit(process_file, file, total, dataset) for file in file_list
        ]
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"An error occurred: {e}")

    end_time = time.time()
    execution_time_seconds = end_time - start_time
    print("Execution time: ", execution_time_seconds)


if __name__ == "__main__":
    args = parameter_parser()
    main(args)
